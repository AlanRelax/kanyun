#!/usr/bin/env python

import sys
import time
import ConfigParser
import json
import zmq

from kanyun.server import api_client

# Author: Peng Yuwei<yuwei5@staff.sina.com.cn> 2012-3-27
# Last update: Peng Yuwei<yuwei5@staff.sina.com.cn> 2012-4-5

def show_result(rs, cf_str):
    for i in rs:
        print "%s" % (i)
    print "%d results of cf=%s" % (len(rs), cf_str)
def show_result2(rs, row_id, cf_str, scf_str):
    for k, i in rs.iteritems():
        print "{%s:%s}" % (k, i)
    print "%d results of key=%s,cf=%s,scf=%s" % (len(rs), row_id, cf_str, scf_str)
def show_result3(rs, row_id):
    for r in rs:
        for k, i in r.iteritems():
            print "%s %d results" % (k, len(i))
            print i
    print "%d results of key=%s" % (len(rs), row_id)

def main():
    if len(sys.argv) == 2:
        if sys.argv[1] in ['--help', "-h", "?"]:
            print "usage:"
            print "\tapi_client"
            print "\tapi_client <cf>"
            print "\tapi_client -k <id>"
            print "\tapi_client <id> <cf> <scf>"
            print "\tapi_client <id> <cf> <scf> <statistic> <period> <time_from> [time_to]"
            print "example:"
            print "\tapi_client vmnetwork"
            print "\tapi_client -k instance-0000002"
            print "\tapi_client instance-0000002 vmnetwork 10.0.0.2"
            print "\tapi_client instance-00000012@lx12 cpu"
            print "\tapi_client instance-00000012@lx12 mem mem_free"
            print "\tapi_client instance-0000002 vmnetwork 10.0.0.2 0 5 1332897600 0"
            return
        
    config = ConfigParser.ConfigParser()
    config.read("kanyun.conf")
    cfg = dict(config.items('client'))
        
    context = zmq.Context()

    api_socket = context.socket(zmq.REQ)
    api_socket.connect("tcp://%(api_host)s:%(api_port)s" % cfg)
    
    if len(sys.argv) == 4:
        row_id, cf_str, scf_str = sys.argv[1], sys.argv[2], sys.argv[3]
        rs = api_client.invoke_getbykey2(api_socket, row_id, cf_str, scf_str)
        show_result2(rs, row_id, cf_str, scf_str)
        return
    elif len(sys.argv) == 2:
        cf_str = sys.argv[1]
        rs = api_client.invoke_getInstacesList(api_socket, cf_str)
        show_result(rs, cf_str)
    elif len(sys.argv) == 3 and sys.argv[1] == '-k':
        row_id = sys.argv[2]
        rs = api_client.invoke_getbykey(api_socket, row_id)
        show_result3(rs, row_id)
        return
    elif len(sys.argv) == 3:
        if sys.argv[2] == 'nic' or sys.argv[2] == 'blk':
            row_id, cf_str, scf_str = sys.argv[1], sys.argv[2], sys.argv[2] + '_incoming'
            rs = api_client.invoke_getbykey2(api_socket, row_id, cf_str, scf_str)
            show_result2(rs, row_id, cf_str, scf_str)
            
            row_id, cf_str, scf_str = sys.argv[1], sys.argv[2], sys.argv[2] + '_outgoing'
            rs = api_client.invoke_getbykey2(api_socket, row_id, cf_str, scf_str)
            show_result2(rs, row_id, cf_str, scf_str)
            return
        elif sys.argv[2] == 'blk':
            row_id, cf_str, scf_str = sys.argv[1], sys.argv[2], sys.argv[2] + '_read'
            rs = api_client.invoke_getbykey2(api_socket, row_id, cf_str, scf_str)
            show_result2(rs, row_id, cf_str, scf_str)
            
            row_id, cf_str, scf_str = sys.argv[1], sys.argv[2], sys.argv[2] + '_write'
            rs = api_client.invoke_getbykey2(api_socket, row_id, cf_str, scf_str)
            show_result2(rs, row_id, cf_str, scf_str)
            return
        elif sys.argv[2] == 'mem':
            row_id, cf_str, scf_str = sys.argv[1], sys.argv[2], sys.argv[2] + '_free'
            rs = api_client.invoke_getbykey2(api_socket, row_id, cf_str, scf_str)
            show_result2(rs, row_id, cf_str, scf_str)
            
            row_id, cf_str, scf_str = sys.argv[1], sys.argv[2], sys.argv[2] + '_max'
            rs = api_client.invoke_getbykey2(api_socket, row_id, cf_str, scf_str)
            show_result2(rs, row_id, cf_str, scf_str)
            return
        else:
            row_id, cf_str, scf_str = sys.argv[1], sys.argv[2], 'total'
            rs = api_client.invoke_getbykey2(api_socket, row_id, cf_str, scf_str)
            show_result2(rs, row_id, cf_str, scf_str)
        return
    elif len(sys.argv) == 8:
        rs = api_client.invoke_statistics(api_socket, sys.argv[1], sys.argv[2], sys.argv[3],sys.argv[4], sys.argv[5], sys.argv[6], sys.argv[7])
        return
    elif len(sys.argv) == 7:
        rs = api_client.invoke_statistics(api_socket, sys.argv[1], sys.argv[2], sys.argv[3],sys.argv[4], sys.argv[5], sys.argv[6], '0')
        return

    
if __name__ == '__main__':
    main()
